#![allow(dead_code)]
#![cfg(feature = "e2e")]
use alloy::{
    primitives:: Address,
    sol,
};
use e2e::Wallet;

sol! {
    #[allow(missing_docs)]
    // Built with Hardhat; solc v0.8.21+commit.d9974bed
    #[sol(rpc, bytecode="60c060405234801561000f575f80fd5b5060405161066338038061066383398101604081905261002e91610051565b1515608052151560a052610082565b8051801515811461004c575f80fd5b919050565b5f8060408385031215610062575f80fd5b61006b8361003d565b91506100796020840161003d565b90509250929050565b60805160a0516105c06100a35f395f6102b801525f61020a01526105c05ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c806323e30c8b1461002d575b5f80fd5b61004061003b36600461046b565b610052565b60405190815260200160405180910390f35b5f336001600160a01b03871614610067575f80fd5b6040516370a0823160e01b815230600482018190527f6ff2acfcb07917b1e80e53f0fe390b467b1151d15b38730a6e08397799c05a8b918891906001600160a01b038316906370a0823190602401602060405180830381865afa1580156100d0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100f49190610509565b604080516001600160a01b0394851681529390921660208401529082015260600160405180910390a17f7249fd4c03cce09b30a13d77804b198e2647c0ccd59eadf4de4e7c16099badc586876001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561017b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061019f9190610509565b604080516001600160a01b03909316835260208301919091520160405180910390a18115610208576102068684848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061030e92505050565b505b7f0000000000000000000000000000000000000000000000000000000000000000156102b6576001600160a01b03861663095ea7b3876102488789610520565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303815f875af1158015610290573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102b4919061053f565b505b7f00000000000000000000000000000000000000000000000000000000000000006102e1575f610303565b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd95b979650505050505050565b606061031b83835f610324565b90505b92915050565b6060814710156103555760405163cf47918160e01b8152476004820152602481018390526044015b60405180910390fd5b5f80856001600160a01b03168486604051610370919061055e565b5f6040518083038185875af1925050503d805f81146103aa576040519150601f19603f3d011682016040523d82523d5f602084013e6103af565b606091505b50915091506103bf8683836103cb565b925050505b9392505050565b6060826103e0576103db82610427565b6103c4565b81511580156103f757506001600160a01b0384163b155b1561042057604051639996b31560e01b81526001600160a01b038516600482015260240161034c565b50806103c4565b8051156104375780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b80356001600160a01b0381168114610466575f80fd5b919050565b5f805f805f8060a08789031215610480575f80fd5b61048987610450565b955061049760208801610450565b94506040870135935060608701359250608087013567ffffffffffffffff808211156104c1575f80fd5b818901915089601f8301126104d4575f80fd5b8135818111156104e2575f80fd5b8a60208285010111156104f3575f80fd5b6020830194508093505050509295509295509295565b5f60208284031215610519575f80fd5b5051919050565b8082018082111561031e57634e487b7160e01b5f52601160045260245ffd5b5f6020828403121561054f575f80fd5b815180151581146103c4575f80fd5b5f82515f5b8181101561057d5760208186018101518583015201610563565b505f92019182525091905056fea264697066735822122031775710bbb1bf7ed2b9e94b901d3bf2cdef44910a00072957ca9b7bc820a7bc64736f6c63430008180033")]
    contract ERC3156FlashBorrowerMock is IERC3156FlashBorrower {
        bytes32 internal constant _RETURN_VALUE = keccak256("ERC3156FlashBorrower.onFlashLoan");

        bool immutable _enableApprove;
        bool immutable _enableReturn;

        event BalanceOf(address token, address account, uint256 value);
        event TotalSupply(address token, uint256 value);

        constructor(bool enableReturn, bool enableApprove) {
            _enableApprove = enableApprove;
            _enableReturn = enableReturn;
        }

        function onFlashLoan(
            address /*initiator*/,
            address token,
            uint256 amount,
            uint256 fee,
            bytes calldata data
        ) public returns (bytes32) {
            require(msg.sender == token);

            emit BalanceOf(token, address(this), IERC20(token).balanceOf(address(this)));
            emit TotalSupply(token, IERC20(token).totalSupply());

            if (data.length > 0) {
                // WARNING: This code is for testing purposes only! Do not use.
                Address.functionCall(token, data);
            }

            if (_enableApprove) {
                IERC20(token).approve(token, amount + fee);
            }

            return _enableReturn ? _RETURN_VALUE : bytes32(0);
        }
    }
}

pub async fn deploy(wallet: &Wallet) -> eyre::Result<Address> {
    // Deploy the contract.
    let contract = ERC3156FlashBorrowerMock::deploy(wallet, true, true).await?;
    Ok(*contract.address())
}
