#![allow(dead_code)]
#![cfg(feature = "e2e")]
use alloy::{primitives::Address, sol};
use e2e::Wallet;

sol! {
    #[allow(missing_docs)]
    // Built with Remix IDE; solc v0.8.21+commit.d9974bed
    #[sol(rpc, bytecode="608060405234801561000f575f80fd5b50637b04a2d060e01b5f806101000a81548163ffffffff021916908360e01c02179055505f8060046101000a81548160ff0219169083600481111561005757610056610061565b5b021790555061008e565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6106d58061009b5f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c806379317985146100385780637b04a2d014610054575b5f80fd5b610052600480360381019061004d9190610322565b610084565b005b61006e6004803603810190610069919061044e565b6100cd565b60405161007b91906104ce565b60405180910390f35b815f806101000a81548163ffffffff021916908360e01c0217905550805f60046101000a81548160ff021916908360048111156100c4576100c36104e7565b5b02179055505050565b5f600160048111156100e2576100e16104e7565b5b5f60049054906101000a900460ff166004811115610103576101026104e7565b5b0361010c575f80fd5b600260048111156101205761011f6104e7565b5b5f60049054906101000a900460ff166004811115610141576101406104e7565b5b03610181576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101789061056e565b60405180910390fd5b60036004811115610195576101946104e7565b5b5f60049054906101000a900460ff1660048111156101b6576101b56104e7565b5b03610204575f8054906101000a900460e01b6040517f66435bc00000000000000000000000000000000000000000000000000000000081526004016101fb91906104ce565b60405180910390fd5b600480811115610217576102166104e7565b5b5f60049054906101000a900460ff166004811115610238576102376104e7565b5b0361024e575f805f61024a91906105b9565b9050505b7f1fa7af237aead0c77cd0a035a35b79014351b77f7edcf8d0d003cf14d90fc631858585856040516102839493929190610661565b60405180910390a15f8054906101000a900460e01b9050949350505050565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6102de816102aa565b81146102e8575f80fd5b50565b5f813590506102f9816102d5565b92915050565b6005811061030b575f80fd5b50565b5f8135905061031c816102ff565b92915050565b5f8060408385031215610338576103376102a2565b5b5f610345858286016102eb565b92505060206103568582860161030e565b9150509250929050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61038982610360565b9050919050565b6103998161037f565b81146103a3575f80fd5b50565b5f813590506103b481610390565b92915050565b5f819050919050565b6103cc816103ba565b81146103d6575f80fd5b50565b5f813590506103e7816103c3565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261040e5761040d6103ed565b5b8235905067ffffffffffffffff81111561042b5761042a6103f1565b5b602083019150836001820283011115610447576104466103f5565b5b9250929050565b5f805f8060608587031215610466576104656102a2565b5b5f610473878288016103a6565b9450506020610484878288016103d9565b935050604085013567ffffffffffffffff8111156104a5576104a46102a6565b5b6104b1878288016103f9565b925092505092959194509250565b6104c8816102aa565b82525050565b5f6020820190506104e15f8301846104bf565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b5f82825260208201905092915050565b7f455243313336335370656e6465724d6f636b3a20726576657274696e670000005f82015250565b5f610558601d83610514565b915061056382610524565b602082019050919050565b5f6020820190508181035f8301526105858161054c565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6105c3826103ba565b91506105ce836103ba565b9250826105de576105dd61058c565b5b828204905092915050565b6105f28161037f565b82525050565b610601816103ba565b82525050565b5f82825260208201905092915050565b828183375f83830152505050565b5f601f19601f8301169050919050565b5f6106408385610607565b935061064d838584610617565b61065683610625565b840190509392505050565b5f6060820190506106745f8301876105e9565b61068160208301866105f8565b8181036040830152610694818486610635565b90509594505050505056fea2646970667358221220ac897a62b363ea028c41811886936f5ad557a6ada87692f16286a8a256d01e6664736f6c63430008150033")]
    // SPDX-License-Identifier: MIT
    contract ERC1363SpenderMock is IERC1363Spender {
        enum RevertType {
            None,
            RevertWithoutMessage,
            RevertWithMessage,
            RevertWithCustomError,
            Panic
        }

        bytes4 private _retval;
        RevertType private _error;

        event Approved(address owner, uint256 value, bytes data);
        error CustomError(bytes4);

        constructor() {
            _retval = IERC1363Spender.onApprovalReceived.selector;
            _error = RevertType.None;
        }

        function setUp(bytes4 retval, RevertType error) public {
            _retval = retval;
            _error = error;
        }

        function onApprovalReceived(
            address owner,
            uint256 value,
            bytes calldata data
        ) external override returns (bytes4) {
            if (_error == RevertType.RevertWithoutMessage) {
                revert();
            } else if (_error == RevertType.RevertWithMessage) {
                revert("ERC1363SpenderMock: reverting");
            } else if (_error == RevertType.RevertWithCustomError) {
                revert CustomError(_retval);
            } else if (_error == RevertType.Panic) {
                uint256 a = uint256(0) / uint256(0);
                a;
            }

            emit Approved(owner, value, data);
            return _retval;
        }
    }
}

/// Deploy an ERC1363 spender mock contract.
pub async fn deploy(wallet: &Wallet) -> eyre::Result<Address> {
    let contract = ERC1363SpenderMock::deploy(wallet).await?;
    Ok(*contract.address())
}
