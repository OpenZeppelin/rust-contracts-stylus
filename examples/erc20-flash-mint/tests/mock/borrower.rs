#![allow(dead_code)]
#![cfg(feature = "e2e")]
use alloy::{primitives::Address, sol};
use e2e::Wallet;

sol! {
    #[allow(missing_docs)]
    // Built with Remix IDE; solc v0.8.24+commit.e11b9ed9
    #[sol(rpc, bytecode="60c060405234801561000f575f80fd5b5060405161054638038061054683398181016040528101906100319190610089565b80151560808115158152505081151560a08115158152505050506100c7565b5f80fd5b5f8115159050919050565b61006881610054565b8114610072575f80fd5b50565b5f815190506100838161005f565b92915050565b5f806040838503121561009f5761009e610050565b5b5f6100ac85828601610075565b92505060206100bd85828601610075565b9150509250929050565b60805160a05161045f6100e75f395f61010e01525f6060015261045f5ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c806323e30c8b1461002d575b5f80fd5b6100476004803603810190610042919061025d565b61005d565b604051610054919061030b565b60405180910390f35b5f7f00000000000000000000000000000000000000000000000000000000000000001561010c578573ffffffffffffffffffffffffffffffffffffffff1663095ea7b38786886100ad9190610351565b6040518363ffffffff1660e01b81526004016100ca9291906103a2565b6020604051808303815f875af11580156100e6573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061010a91906103fe565b505b7f0000000000000000000000000000000000000000000000000000000000000000610139575f801b61015b565b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd95b90509695505050505050565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6101988261016f565b9050919050565b6101a88161018e565b81146101b2575f80fd5b50565b5f813590506101c38161019f565b92915050565b5f819050919050565b6101db816101c9565b81146101e5575f80fd5b50565b5f813590506101f6816101d2565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261021d5761021c6101fc565b5b8235905067ffffffffffffffff81111561023a57610239610200565b5b60208301915083600182028301111561025657610255610204565b5b9250929050565b5f805f805f8060a0878903121561027757610276610167565b5b5f61028489828a016101b5565b965050602061029589828a016101b5565b95505060406102a689828a016101e8565b94505060606102b789828a016101e8565b935050608087013567ffffffffffffffff8111156102d8576102d761016b565b5b6102e489828a01610208565b92509250509295509295509295565b5f819050919050565b610305816102f3565b82525050565b5f60208201905061031e5f8301846102fc565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61035b826101c9565b9150610366836101c9565b925082820190508082111561037e5761037d610324565b5b92915050565b61038d8161018e565b82525050565b61039c816101c9565b82525050565b5f6040820190506103b55f830185610384565b6103c26020830184610393565b9392505050565b5f8115159050919050565b6103dd816103c9565b81146103e7575f80fd5b50565b5f815190506103f8816103d4565b92915050565b5f6020828403121561041357610412610167565b5b5f610420848285016103ea565b9150509291505056fea2646970667358221220a96d80b0b729856dcaf705105a909f6512627bc4999bde52a45d088719318bbf64736f6c63430008180033")]
    contract ERC3156FlashBorrowerMock is IERC3156FlashBorrower {
        bytes32 internal constant _RETURN_VALUE =
            keccak256("ERC3156FlashBorrower.onFlashLoan");

        bool immutable _enableApprove;
        bool immutable _enableReturn;

        event BalanceOf(address token, address account, uint256 value);
        event TotalSupply(address token, uint256 value);

        constructor(bool enableReturn, bool enableApprove) {
            _enableApprove = enableApprove;
            _enableReturn = enableReturn;
        }

        function onFlashLoan(
            address /* initiator */,
            address token,
            uint256 amount,
            uint256 fee,
            bytes calldata data
        ) public returns (bytes32) {
            // require(msg.sender == token, "Invalid token address");

            // emit BalanceOf(
            //     token,
            //     address(this),
            //     IERC20(token).balanceOf(address(this))
            // );
            // emit TotalSupply(token, IERC20(token).totalSupply());

            // if (data.length > 0) {
            //     // WARNING: This code is for testing purposes only! Do not use in production.
            //     Address.functionCall(token, data);
            // }

            if (_enableApprove) {
                IERC20(token).approve(token, amount + fee);
            }

            return _enableReturn ? _RETURN_VALUE : bytes32(0);
        }
    }
}

pub async fn deploy(
    wallet: &Wallet,
    enable_return: bool,
    enable_approve: bool,
) -> eyre::Result<Address> {
    // Deploy the contract.
    let contract =
        ERC3156FlashBorrowerMock::deploy(wallet, enable_return, enable_approve)
            .await?;
    Ok(*contract.address())
}
