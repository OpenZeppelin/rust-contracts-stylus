#![allow(dead_code)]
#![cfg(feature = "e2e")]
use alloy::{primitives::Address, sol};
use e2e::Wallet;

sol! {
    #[allow(missing_docs)]
    // Built with Remix IDE; solc v0.8.24+commit.e11b9ed9
    #[sol(rpc, bytecode="60c060405234801561000f575f80fd5b5060405161076238038061076283398181016040528101906100319190610089565b80151560808115158152505081151560a08115158152505050506100c7565b5f80fd5b5f8115159050919050565b61006881610054565b8114610072575f80fd5b50565b5f815190506100838161005f565b92915050565b5f806040838503121561009f5761009e610050565b5b5f6100ac85828601610075565b92505060206100bd85828601610075565b9150509250929050565b60805160a05161067d6100e55f395f61012801525f505061067d5ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c806323e30c8b1461002d575b5f80fd5b61004760048036038101906100429190610428565b61005d565b60405161005491906104d6565b60405180910390f35b5f8573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146100cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100c390610549565b60405180910390fd5b5f838390501115610126576101248684848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050610181565b505b7f0000000000000000000000000000000000000000000000000000000000000000610153575f801b610175565b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd95b90509695505050505050565b606061018e83835f610196565b905092915050565b6060814710156101df5747826040517fcf4791810000000000000000000000000000000000000000000000000000000081526004016101d6929190610576565b60405180910390fd5b5f808573ffffffffffffffffffffffffffffffffffffffff1684866040516102079190610609565b5f6040518083038185875af1925050503d805f8114610241576040519150601f19603f3d011682016040523d82523d5f602084013e610246565b606091505b5091509150610256868383610261565b925050509392505050565b60608261027657610271826102ee565b6102e6565b5f825114801561029c57505f8473ffffffffffffffffffffffffffffffffffffffff163b145b156102de57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016102d5919061062e565b60405180910390fd5b8190506102e7565b5b9392505050565b5f815111156103005780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6103638261033a565b9050919050565b61037381610359565b811461037d575f80fd5b50565b5f8135905061038e8161036a565b92915050565b5f819050919050565b6103a681610394565b81146103b0575f80fd5b50565b5f813590506103c18161039d565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126103e8576103e76103c7565b5b8235905067ffffffffffffffff811115610405576104046103cb565b5b602083019150836001820283011115610421576104206103cf565b5b9250929050565b5f805f805f8060a0878903121561044257610441610332565b5b5f61044f89828a01610380565b965050602061046089828a01610380565b955050604061047189828a016103b3565b945050606061048289828a016103b3565b935050608087013567ffffffffffffffff8111156104a3576104a2610336565b5b6104af89828a016103d3565b92509250509295509295509295565b5f819050919050565b6104d0816104be565b82525050565b5f6020820190506104e95f8301846104c7565b92915050565b5f82825260208201905092915050565b7f496e76616c696420746f6b656e206164647265737300000000000000000000005f82015250565b5f6105336015836104ef565b915061053e826104ff565b602082019050919050565b5f6020820190508181035f83015261056081610527565b9050919050565b61057081610394565b82525050565b5f6040820190506105895f830185610567565b6105966020830184610567565b9392505050565b5f81519050919050565b5f81905092915050565b5f5b838110156105ce5780820151818401526020810190506105b3565b5f8484015250505050565b5f6105e38261059d565b6105ed81856105a7565b93506105fd8185602086016105b1565b80840191505092915050565b5f61061482846105d9565b915081905092915050565b61062881610359565b82525050565b5f6020820190506106415f83018461061f565b9291505056fea2646970667358221220dc4e60c66cfbdfd7dd26ded70fee38bc2f2a8d336e194f923335fcc7f2a1468c64736f6c63430008180033")]
    contract ERC3156FlashBorrowerMock is IERC3156FlashBorrower {
        bytes32 internal constant _RETURN_VALUE =
            keccak256("ERC3156FlashBorrower.onFlashLoan");

        bool immutable _enableApprove;
        bool immutable _enableReturn;

        #[derive(Debug, PartialEq)]
        event BalanceOf(address token, address account, uint256 value);
        #[derive(Debug, PartialEq)]
        event TotalSupply(address token, uint256 value);

        constructor(bool enableReturn, bool enableApprove) {
            _enableApprove = enableApprove;
            _enableReturn = enableReturn;
        }

        function onFlashLoan(
            address, /* initiator */
            address token,
            uint256 /* amount */,
            uint256 /* fee */,
            bytes calldata data
        ) public returns (bytes32) {
            require(msg.sender == token, "Invalid token address");

            // emit BalanceOf(
                // token,
                // address(this),
                // IERC20(token).balanceOf(address(this))
            // );

            // emit TotalSupply(token, IERC20(token).totalSupply());

            if (data.length > 0) {
                // WARNING: This code is for testing purposes only! Do not use in production.
                Address.functionCall(token, data);
            }

            // if (_enableApprove) {
                // IERC20(token).approve(token, amount + fee);
            // }

            return _enableReturn ? _RETURN_VALUE : bytes32(0);
        }
    }
}

pub async fn deploy(
    wallet: &Wallet,
    enable_return: bool,
    enable_approve: bool,
) -> eyre::Result<Address> {
    // Deploy the contract.
    let contract =
        ERC3156FlashBorrowerMock::deploy(wallet, enable_return, enable_approve)
            .await?;
    Ok(*contract.address())
}
