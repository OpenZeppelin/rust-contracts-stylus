#![allow(dead_code)]
#![cfg(feature = "e2e")]
use alloy::{primitives::Address, sol};
use e2e::Wallet;

sol! {
    #[allow(missing_docs)]
    // Built with Remix IDE; solc v0.8.24+commit.e11b9ed9
    #[sol(rpc, bytecode="60c060405234801561000f575f80fd5b50604051610ac5380380610ac583398181016040528101906100319190610089565b80151560808115158152505081151560a08115158152505050506100c7565b5f80fd5b5f8115159050919050565b61006881610054565b8114610072575f80fd5b50565b5f815190506100838161005f565b92915050565b5f806040838503121561009f5761009e610050565b5b5f6100ac85828601610075565b92505060206100bd85828601610075565b9150509250929050565b60805160a0516109dd6100e85f395f61032d01525f61027f01526109dd5ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c806323e30c8b1461002d575b5f80fd5b6100476004803603810190610042919061062d565b61005d565b60405161005491906106db565b60405180910390f35b5f8573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146100cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100c39061074e565b60405180910390fd5b7f6ff2acfcb07917b1e80e53f0fe390b467b1151d15b38730a6e08397799c05a8b86308873ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610128919061077b565b602060405180830381865afa158015610143573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061016791906107a8565b604051610176939291906107e2565b60405180910390a17f7249fd4c03cce09b30a13d77804b198e2647c0ccd59eadf4de4e7c16099badc5868773ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101e9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061020d91906107a8565b60405161021b929190610817565b60405180910390a15f83839050111561027d5761027b8684848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050610386565b505b7f00000000000000000000000000000000000000000000000000000000000000001561032b578573ffffffffffffffffffffffffffffffffffffffff1663095ea7b38786886102cc919061086b565b6040518363ffffffff1660e01b81526004016102e9929190610817565b6020604051808303815f875af1158015610305573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061032991906108d3565b505b7f0000000000000000000000000000000000000000000000000000000000000000610358575f801b61037a565b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd95b90509695505050505050565b606061039383835f61039b565b905092915050565b6060814710156103e45747826040517fcf4791810000000000000000000000000000000000000000000000000000000081526004016103db9291906108fe565b60405180910390fd5b5f808573ffffffffffffffffffffffffffffffffffffffff16848660405161040c9190610991565b5f6040518083038185875af1925050503d805f8114610446576040519150601f19603f3d011682016040523d82523d5f602084013e61044b565b606091505b509150915061045b868383610466565b925050509392505050565b60608261047b57610476826104f3565b6104eb565b5f82511480156104a157505f8473ffffffffffffffffffffffffffffffffffffffff163b145b156104e357836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016104da919061077b565b60405180910390fd5b8190506104ec565b5b9392505050565b5f815111156105055780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6105688261053f565b9050919050565b6105788161055e565b8114610582575f80fd5b50565b5f813590506105938161056f565b92915050565b5f819050919050565b6105ab81610599565b81146105b5575f80fd5b50565b5f813590506105c6816105a2565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126105ed576105ec6105cc565b5b8235905067ffffffffffffffff81111561060a576106096105d0565b5b602083019150836001820283011115610626576106256105d4565b5b9250929050565b5f805f805f8060a0878903121561064757610646610537565b5b5f61065489828a01610585565b965050602061066589828a01610585565b955050604061067689828a016105b8565b945050606061068789828a016105b8565b935050608087013567ffffffffffffffff8111156106a8576106a761053b565b5b6106b489828a016105d8565b92509250509295509295509295565b5f819050919050565b6106d5816106c3565b82525050565b5f6020820190506106ee5f8301846106cc565b92915050565b5f82825260208201905092915050565b7f496e76616c696420746f6b656e206164647265737300000000000000000000005f82015250565b5f6107386015836106f4565b915061074382610704565b602082019050919050565b5f6020820190508181035f8301526107658161072c565b9050919050565b6107758161055e565b82525050565b5f60208201905061078e5f83018461076c565b92915050565b5f815190506107a2816105a2565b92915050565b5f602082840312156107bd576107bc610537565b5b5f6107ca84828501610794565b91505092915050565b6107dc81610599565b82525050565b5f6060820190506107f55f83018661076c565b610802602083018561076c565b61080f60408301846107d3565b949350505050565b5f60408201905061082a5f83018561076c565b61083760208301846107d3565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61087582610599565b915061088083610599565b92508282019050808211156108985761089761083e565b5b92915050565b5f8115159050919050565b6108b28161089e565b81146108bc575f80fd5b50565b5f815190506108cd816108a9565b92915050565b5f602082840312156108e8576108e7610537565b5b5f6108f5848285016108bf565b91505092915050565b5f6040820190506109115f8301856107d3565b61091e60208301846107d3565b9392505050565b5f81519050919050565b5f81905092915050565b5f5b8381101561095657808201518184015260208101905061093b565b5f8484015250505050565b5f61096b82610925565b610975818561092f565b9350610985818560208601610939565b80840191505092915050565b5f61099c8284610961565b91508190509291505056fea26469706673582212208f161359480903fbdeea9352707efbf80e485ced15031a30336260c72003320164736f6c63430008180033")]
    contract ERC3156FlashBorrowerMock is IERC3156FlashBorrower {
        bytes32 internal constant _RETURN_VALUE =
            keccak256("ERC3156FlashBorrower.onFlashLoan");

        bool immutable _enableApprove;
        bool immutable _enableReturn;

        event BalanceOf(address token, address account, uint256 value);
        event TotalSupply(address token, uint256 value);

        constructor(bool enableReturn, bool enableApprove) {
            _enableApprove = enableApprove;
            _enableReturn = enableReturn;
        }

        function onFlashLoan(
            address, /* initiator */
            address token,
            uint256 amount,
            uint256 fee,
            bytes calldata data
        ) public returns (bytes32) {
            require(msg.sender == token, "Invalid token address");

            emit BalanceOf(
                token,
                address(this),
                IERC20(token).balanceOf(address(this))
            );
            emit TotalSupply(token, IERC20(token).totalSupply());

            if (data.length > 0) {
                // WARNING: This code is for testing purposes only! Do not use in production.
                Address.functionCall(token, data);
            }

            if (_enableApprove) {
                IERC20(token).approve(token, amount + fee);
            }

            return _enableReturn ? _RETURN_VALUE : bytes32(0);
        }
    }
}

pub async fn deploy(
    wallet: &Wallet,
    enable_return: bool,
    enable_approve: bool,
) -> eyre::Result<Address> {
    // Deploy the contract.
    let contract =
        ERC3156FlashBorrowerMock::deploy(wallet, enable_return, enable_approve)
            .await?;
    Ok(*contract.address())
}
