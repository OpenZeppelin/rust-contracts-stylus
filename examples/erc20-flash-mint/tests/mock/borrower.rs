#![allow(dead_code)]
#![cfg(feature = "e2e")]
use alloy::{primitives::Address, sol};
use e2e::Wallet;

sol! {
    #[allow(missing_docs)]
    // Built with solc v0.8.24; solc examples/erc20-flash-mint/src/ERC3156FlashBorrowerMock.sol --via-ir --optimize --bin
    #[sol(rpc, bytecode="60803461007e57601f61051038819003918201601f19168301916001600160401b0383118484101761008257808492604094855283398101031261007e57610052602061004b83610096565b9201610096565b15159060ff61ff005f5492151560081b1692169061ffff191617175f5560405161046c90816100a48239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b5190811515820361007e5756fe60806040818152600480361015610014575f80fd5b5f3560e01c6323e30c8b14610027575f80fd5b346102405760a0366003190112610240576001600160a01b03908035828116036102405760249182359081169182820361024057604435936084359667ffffffffffffffff90818911610240573660238a0112156102405788840135918211610240573683838b01011161024057853303610349575086516370a0823160e01b8152308482015260209890898185818a5afa908115610311575f9161031b575b5060607f6ff2acfcb07917b1e80e53f0fe390b467b1151d15b38730a6e08397799c05a8b918a5190898252308d8301528b820152a187516318160ddd60e01b8152898186818a5afa90811561031157918a918a94935f916102db575b5084516001600160a01b038916815260208101919091527f7249fd4c03cce09b30a13d77804b198e2647c0ccd59eadf4de4e7c16099badc59080604081015b0390a182610267575b5050505060ff5f54166101bc575b505050505060ff5f5460081c165f146101b5577f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9905b51908152f35b5f906101af565b60643585018095116102555750845163095ea7b360e01b81526001600160a01b039092169082019081526020810193909352918491839182905f90829060400103925af1801561024b57610214575b80808080610179565b8281813d8311610244575b6102298183610381565b81010312610240575180151503610240575f61020b565b5f80fd5b503d61021f565b82513d5f823e3d90fd5b634e487b7160e01b5f90815260118352fd5b6102c9935f8094938461028661027d84976103b7565b94519485610381565b80845280898386019601863783010152519082885af13d156102d3573d906102ad826103b7565b916102ba8a519384610381565b82523d5f8b84013e5b856103d3565b50855f888161016b565b6060906102c3565b92809295508391503d831161030a575b6102f58183610381565b81010312610240575188928a91610162610123565b503d6102eb565b89513d5f823e3d90fd5b90508981813d8311610342575b6103328183610381565b81010312610240575160606100c7565b503d610328565b62461bcd60e51b815260208482015260158382015274496e76616c696420746f6b656e206164647265737360581b6044820152606490fd5b90601f8019910116810190811067ffffffffffffffff8211176103a357604052565b634e487b7160e01b5f52604160045260245ffd5b67ffffffffffffffff81116103a357601f01601f191660200190565b906103fa57508051156103e857805190602001fd5b60405163d6bda27560e01b8152600490fd5b8151158061042d575b61040b575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561040356fea26469706673582212206a0814f4a2bc2e74f72aa8a129322108963c304b9fdb18c0091694797aae615e64736f6c63430008180033")]
    contract ERC3156FlashBorrowerMock is IERC3156FlashBorrower {
        bytes32 internal constant _RETURN_VALUE =
            keccak256("ERC3156FlashBorrower.onFlashLoan");

        bool _enableApprove;
        bool _validReturn;

        #[derive(Debug, PartialEq)]
        event BalanceOf(address token, address account, uint256 value);
        #[derive(Debug, PartialEq)]
        event TotalSupply(address token, uint256 value);

        constructor(bool validReturn, bool enableApprove) {
            _enableApprove = enableApprove;
            _validReturn = validReturn;
        }

        function onFlashLoan(
            address /* initiator */,
            address token,
            uint256 amount,
            uint256 fee,
            bytes calldata data
        ) public returns (bytes32) {
            require(msg.sender == token, "Invalid token address");

            emit BalanceOf(
                token,
                address(this),
                IERC20(token).balanceOf(address(this))
            );

            emit TotalSupply(token, IERC20(token).totalSupply());

            if (data.length > 0) {
                // WARNING: This code is for testing purposes only! Do not use in production.
                Address.functionCall(token, data);
            }

            if (_enableApprove) {
                IERC20(token).approve(token, amount + fee);
            }

            return _validReturn ? _RETURN_VALUE : bytes32(0);
        }
    }
}

pub async fn deploy(
    wallet: &Wallet,
    enable_return: bool,
    enable_approve: bool,
) -> eyre::Result<Address> {
    // Deploy the contract.
    let contract =
        ERC3156FlashBorrowerMock::deploy(wallet, enable_return, enable_approve)
            .await?;
    Ok(*contract.address())
}
